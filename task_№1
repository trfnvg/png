#include <iostream>
#include <stdio.h>
#include <zlib.h>
#include "zlib.h"
#include "zconf.h"
#include <vector>
#include <assert.h>
#define CHUNK 16384
using namespace std;

uint16_t swap_byte16 (uint16_t word) // Меняет местами байты
{
  return (word << 8) | (word >> 8);
}

uint32_t swap_byte32 (uint32_t word)
{
  return (((word&0xFF)<<24)|((word&0xFF00)<<8)|((word&0xFF0000)>>8)|((word&0xFF000000)>>24));
}


int func_1(FILE *in)
{
  uint16_t d; uint8_t c[4];  uint32_t IDATlength; uint8_t dictionary;
  fseek(in, 1, SEEK_SET);
  fread(c, sizeof(uint8_t), 3, in);
  if (c[0] == 80 && c[1] == 78 && c[2] == 71)
  {
    printf("the file is in PNG format \n");
  }
  else
  {
    printf("this is not PNG format \n");
    return -1;
  }
  fseek(in, 18, SEEK_SET);
  fread( &d, sizeof(uint16_t), 2, in);
  cout << "sizes are - ";
  printf("%d  ", swap_byte16(d));
  fseek(in, 22, SEEK_SET);
  fread( &d, sizeof(uint16_t), 2, in);
  printf("%d  ", swap_byte16(d));
  fseek(in, 24, SEEK_SET);
  fread( c, sizeof(uint8_t), 5, in);
  printf("\nbit depth is - %x \n", c[0]);
  printf("color type is - %x \n", c[1]);
  printf("compression method - %x \n", c[2]);
  printf("filter method - %x \n", c[3]);
  printf("interlace method - %x \n", c[4]);
  int i = 0, j = 0;
  do{
          fseek(in, i, SEEK_SET);
          fread( c, sizeof(uint8_t), 4, in);
          if (c[0] == 73 && c[1] == 68 && c[2] == 65 && c[3] == 84)
          {j = 1;}
          else
          {i = i+1;}
    }while (j != 1);
  int k = i;
  printf("IDAT position - %d \n", i);
  fseek(in, i - 4, SEEK_SET);
  fread(&IDATlength, sizeof(uint32_t), 1, in);
  IDATlength = swap_byte32(IDATlength);
  printf("IDAT length - %d \n", IDATlength);
  fseek(in, i + 5, SEEK_SET);
  fread(&dictionary, sizeof(uint8_t), 1, in);
  return (k);
}







int inf(FILE *source, FILE *_dest, int IDAT_first_byte)
{
            fseek(source, IDAT_first_byte, SEEK_SET);
            int ret;
            unsigned have;
            z_stream strm;
            unsigned char in[CHUNK];
            unsigned char out[CHUNK];
            strm.zalloc = Z_NULL;
            strm.zfree = Z_NULL;
            strm.opaque = Z_NULL;
            strm.avail_in = 0;
            strm.next_in = Z_NULL;
            ret = inflateInit(&strm);
            if (ret != Z_OK) {return ret;}
            do {
                strm.avail_in = fread(in, 1, CHUNK, source);
                if (ferror(source))
                {
                  (void) inflateEnd(&strm);
                  return Z_ERRNO;
                }
                if (strm.avail_in == 0) {break;}
                strm.next_in = in;
                do {
                    strm.avail_out = CHUNK;
                    strm.next_out = out;
                    ret = inflate(&strm, Z_NO_FLUSH);
                    assert(ret != Z_STREAM_ERROR);
                    switch (ret)
                    {
                        case Z_NEED_DICT: {ret = Z_DATA_ERROR;}
                        case Z_MEM_ERROR: {(void) inflateEnd(&strm); return ret;}
                    }
                    have = CHUNK - strm.avail_out;

                    for(int j = 0; j < have; j++)
                    {
                      fprintf(_dest, "%d  ", out[j]);
                    }
                } while (strm.avail_out == 0);
            } while (ret != Z_STREAM_END);
            (void) inflateEnd(&strm);
            if(ret != Z_STREAM_END)
            {
              return  Z_DATA_ERROR;
            }
            return Z_OK;
}

void zerr(int ret)
{
    switch (ret) {
        case Z_ERRNO:
            std::cout << "error reading" << std::endl;
            break;
        case Z_STREAM_ERROR:
            std::cout << "invalid compression level" << std::endl;
            break;
        case Z_DATA_ERROR:
            std::cout << "invalid or incomplete deflate data" << std::endl;
            break;
        case Z_MEM_ERROR:
            std::cout << "out of memory" << std::endl;
            break;
        case Z_VERSION_ERROR:
            std::cout << "zlib version mismatch!" << std::endl;
    }
}

int main()
{
  FILE *in = fopen("png-small.png", "rb");
  FILE *out = fopen("result.txt", "w");
  if( in == NULL )
  { printf("Error \n"); return -1; }


  int IDATpos = func_1(in);
  fseek(in, IDATpos + 4, SEEK_SET);
  int IDAT_first_byte = ftell(in);
  int ret1 = inf(in, out, IDAT_first_byte);
    if(ret1 != Z_OK){
        zerr(ret1);
        return 1;
    } else {
        std::cout << "Decompression finished successfully" << std::endl;
    }
    fclose(in);
    fclose(out);
    return 0;
}

